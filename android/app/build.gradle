apply plugin: "com.android.application"

import com.android.build.OutputFile
import com.android.builder.core.DefaultManifestParser

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        // the name of the generated asset file containing your JS bundle
        bundleAssetName      : "index.android.bundle",

        // the entry file for bundle generation
        entryFile            : "index.android.js",

        // whether to bundle JS and assets in debug mode
        bundleInDebug        : false,

        // whether to bundle JS and assets in release mode
        bundleInRelease      : false,

        // whether to bundle JS and assets in another build variant (if configured).
        // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
        // The configuration property can be in the following formats
        //         'bundleIn${productFlavor}${buildType}'
        //         'bundleIn${buildType}'
        // bundleInFreeDebug: true,
        // bundleInPaidRelease: true,
        // bundleInBeta: true,

        // the root of your project, i.e. where "package.json" lives
        root                 : "../../",

        // where to put the JS bundle asset in debug mode
        jsBundleDirDebug     : "$buildDir/intermediates/assets/debug",

        // where to put the JS bundle asset in release mode
        jsBundleDirRelease   : "$buildDir/intermediates/assets/release",

        // where to put drawable resources / React Native assets, e.g. the ones you use via
        // require('./image.png')), in debug mode
        resourcesDirDebug    : "$buildDir/intermediates/res/merged/debug",

        // where to put drawable resources / React Native assets, e.g. the ones you use via
        // require('./image.png')), in release mode
        resourcesDirRelease  : "$buildDir/intermediates/res/merged/release",

        // by default the gradle tasks are skipped if none of the JS files or assets change; this means
        // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
        // date; if you have any other folders that you want to ignore for performance reasons (gradle
        // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
        // for example, you might want to remove it from here.
        inputExcludes        : ["android/", "ios/"],

        // override which node gets called and with what additional arguments
        nodeExecutableAndArgs: ["node"],

        // supply additional arguments to the packager
        extraPackagerArgs    : []
]

// because elvis operator
def elvisFile(thing) {
    return thing ? file(thing) : null;
}

/*
task createBundle(type: Exec) {
    println 'createBundle()'
    def config = project.hasProperty("react") ? project.react : [];
    // Set up dev mode, only for release mode
    def devEnabled = false

    def bundleAssetName = config.bundleAssetName ?: "index.android.bundle"
    def entryFile = config.entryFile ?: "index.android.js"
    def reactRoot = elvisFile(config.root) ?: file("../../")
    def inputExcludes = config.inputExcludes ?: ["android/**", "ios/**"]
    // Additional node and packager commandline arguments
    def nodeExecutableAndArgs = config.nodeExecutableAndArgs ?: ["node"]
    def extraPackagerArgs = config.extraPackagerArgs ?: []
    def jsBundleFile = "android/app/src/main/assets/index.android.bundle"
    def resourcesDir = "android/app/src/main/res/"

    print inputExcludes

    commandLine(*nodeExecutableAndArgs, "node_modules/react-native/local-cli/cli.js", "bundle", "--platform", "android", "--dev", "${devEnabled}",
            "--reset-cache", "--entry-file", entryFile, "--bundle-output", jsBundleFile, "--assets-dest", resourcesDir, *extraPackagerArgs)
}
*/




apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

//apply from: "./react.gradle"
/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = true // 启用不同CPU架构的包

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 24
    buildToolsVersion "23.0.3"

    defaultConfig {
//        applicationId "cn.pilipa.custapp"
        minSdkVersion 16
        targetSdkVersion 22
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        manifestPlaceholders = [
                JPUSH_APPKEY: "18d5ed48d3155714f80f3927",    // JPush 的APPKey
                APP_CHANNEL : "developer-default"        //JPush 应用渠道号
        ]
    }

    signingConfigs {
        pilipa {
            storeFile file("corpapp.keystore")
            storePassword "pilipa"
            keyAlias "pilipa"
            keyPassword "pilipa"
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/'
    }

    splits {
        abi {
            // Enables building multiple APKs per ABI.
            enable enableSeparateBuildPerCPUArchitecture

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "armeabi-v7a", "x86"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk true
        }
    }
    buildTypes {
        debug {
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.pilipa
        }
        releaseStaging {
            signingConfig signingConfigs.pilipa
            buildConfigField "String", "CODEPUSH_KEY", '"QSOUhO8arMoc73iImahbPhkZaV3xb9c43031-f8df-47b3-8e35-085700d8d99a"'
        }
        release {
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.pilipa
            buildConfigField "String", "CODEPUSH_KEY", '"b1Qml4vlHIpmjeA5d6ZIOR9u_9VZb9c43031-f8df-47b3-8e35-085700d8d99a"'
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            println('abi = ' + abi);

            def manifestParser = new DefaultManifestParser(android.sourceSets.main.manifest.srcFile);

/*
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + System.currentTimeMillis()
                        println('abi != null output.versionCodeOverride = ' + output.versionCodeOverride);
// manifestParser.getVersionCode()// defaultConfig.versionCode
            } else {// no split here
                output.versionCodeOverride = 1 * 1048576 + System.currentTimeMillis();
                println('no split here output.versionCodeOverride = ' + output.versionCodeOverride);
            }
*/
            //修改生成的apk名字
            def oldFile = output.outputFile

            println('oldFile = ' + oldFile);

            def versionName = manifestParser.getVersionName()
//            def newName = "pi_v_" + defaultConfig.versionName;
            def releaseApkName = "li-" + abi + '-' + variant.buildType.name + '.apk';//+ "_v" + versionName + "_" + releaseTime() ;
            if (abi == null) {
                releaseApkName = "li-" + variant.buildType.name + '.apk';
            }

            println('releaseApkName = ' + releaseApkName);
            output.outputFile = new File(oldFile.parent, releaseApkName);
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
}

def releaseTime() {
    return new Date().format("yyyy_MM_dd_HH_mm_ss")// TimeZone.getTimeZone("UTC")
}

dependencies {
    compile project(':react-native-device-info')
    compile project(':react-native-clear-cache')
    compile project(':react-native-camera')
    compile project(':react-native-code-push')
    compile project(':react-native-fs')
    compile project(':react-native-interactable')
    compile project(':react-native-spinkit')
    compile project(':react-native-svg')
    compile project(':react-native-alert')
    compile project(':react-native-picker')
    compile project(':react-native-image-crop-picker')
    compile project(':react-native-navigation')
    compile(project(':react-native-device-info')) {
        exclude group: 'com.google.android.gms'
    }
    compile project(':react-native-vector-icons')
    compile project(':react-native-blur')
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile project(':jpush-react-native')
    compile project(':jcore-react-native')
    compile "com.android.support:appcompat-v7:24.0.1"
    compile "com.facebook.react:react-native:+"  // From node_modules
    //注释掉原有bugly的仓库
    compile 'com.android.support:multidex:1.0.1'
//    compile 'com.tencent.bugly:crashreport:latest.release'//其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.3.2
    compile 'com.tencent.bugly:crashreport_upgrade:latest.release'
//其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.2.0
    compile 'com.umeng.analytics:analytics:latest.integration'
    compile project(':react-native-wechat')
    compile 'com.meituan.android.walle:library:1.1.5'// 瓦力
    compile(project(':react-native-camera')) {
        exclude group: "com.android.support"

        // uncomment this if also com.google.android.gms:play-services-vision versions are conflicting
        // this can happen if you use react-native-firebase
        exclude group: "com.google.android.gms"
    }
}

buildscript {
    repositories {
        maven { url 'https://github.com/500px/500px-android-blur/raw/master/releases/' }
    }
    dependencies {
        classpath 'com.fivehundredpx:blurringview:1.0.0'
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
